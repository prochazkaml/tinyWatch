#ifndef Chicago21x18_font_h
#define Chicago21x18_font_h

#include <stdint.h>

const uint8_t bigfont[] = {
	0, 21, 36, 65, 96, 129, 147, 172, 196, 217, 242, // LUT

	/*
	 * Brief explanation of the compression used:
	 * 
	 * Each character is x*20 pixels large, it is stored by column, each one takes up 3 bytes.
	 * The lowest nibble of each column (indicated below with the asterisks) has a special meaning.
	 * If it contains a number other than 0, then the decompression routine will "skip" the next N screen bytes.
	 * If it contains 15, it is treated as the character terminator.
	 * 
	 * Example:
	 * 
	 * // 0             *   1             *   2             *
	 *    0xFF, 0x81, 0x36,                   0x69, 0x42, 0xF0
	 * 
	 * Will get decompressed as:
	 * 
	 * // 0             *   1             *   2             *
	 *    0xFF, 0x81, 0x06, 0x00, 0x00, 0x00, 0x69, 0x42, 0xF0
	 */

//  0             *   1             *   2             *   3             *   4             *   5             *   6             *   7             *   8             *   9             *   10            *   11            *   12            *
	0xF8, 0xFF, 0x01, 0xFC, 0xFF, 0x03, 0xFE, 0xFF, 0x67,                                     0x06, 0x00, 0x66,                                     0xFE, 0xFF, 0x07, 0xFC, 0xFF, 0x03, 0xF8, 0xFF, 0xF1, // 0
	0x00, 0x00, 0x60,                                     0x1C, 0x00, 0x00, 0x1E, 0x00, 0x00, 0xE0, 0xFF, 0x37,                   0xFE, 0xFF, 0xF7, // 1
	0x18, 0x00, 0x07, 0x0C, 0x80, 0x01, 0x06, 0xC0, 0x10,       0x60, 0x16,       0x30, 0x00, 0x06, 0x18, 0x10,       0x0C, 0x16,       0x06, 0x00, 0xFE, 0x03, 0x00, 0xFC, 0x01, 0x06, 0xF8, 0x00, 0xF6, // 2
	0x06, 0x80, 0x21,             0x03, 0x80, 0x01, 0x06, 0x46, 0x00, 0x00, 0x20, 0x00, 0x00, 0xF0, 0x01, 0x06, 0x7E, 0x00, 0x00, 0x20, 0x00, 0x00, 0x90, 0xFF, 0x07, 0x0E, 0xFF, 0x03, 0x06, 0xFE, 0xF1, // 3
	0x00, 0x1F, 0x00, 0x80, 0x03, 0x00, 0xC0, 0x01, 0x00, 0xE0, 0x18, 0x00, 0x70, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1C, 0x18, 0x00, 0x0E, 0x00, 0x00, 0xFE, 0xFF, 0x37,                   0xFE, 0xFF, 0x37,                   0x00, 0x18, 0xF0, // 4
	0xFE, 0x81, 0x21,             0x03, 0xFE, 0x01, 0x66,                                     0x86, 0x01, 0x66,                                     0x86, 0xFF, 0x17,       0xFF, 0x03, 0x06, 0xFE, 0xF1, // 5
	0xC0, 0xFF, 0x01, 0xE0, 0xFF, 0x03, 0xF0, 0xFF, 0x07, 0x38, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x8E, 0x01, 0x66,                                     0x86, 0xFF, 0x17,       0xFF, 0x13,       0xFE, 0xF1, // 6
	0x06, 0x00, 0x60,                                     0x06, 0x00, 0x10,       0xF0, 0x17,       0x08, 0x00, 0x06, 0xFC, 0x07, 0x06, 0x0E, 0x00, 0xFE, 0x07, 0x10,       0x02, 0x00, 0xFE, 0x01, 0xF0, // 7
	0xF8, 0xF9, 0x01, 0xFC, 0xFF, 0x03, 0xFE, 0xFF, 0x67,                                     0x06, 0x06, 0x66,                                     0xFE, 0xFF, 0x07, 0xFC, 0xFF, 0x03, 0xF8, 0xF9, 0xF1, // 8
	0xF8, 0x07, 0x00, 0xFC, 0x0F, 0x00, 0xFE, 0x1F, 0x66,                                     0x06, 0x18, 0x17,       0x80, 0x13,       0xC0, 0x01, 0xFE, 0xFF, 0x00, 0xFC, 0x7F, 0x00, 0xF8, 0x1F, 0xF0, // 9
	0xE0, 0x81, 0x37,                   0xE0, 0x81, 0xF7, // :
};

#endif
